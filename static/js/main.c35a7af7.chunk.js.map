{"version":3,"sources":["Components/Loading.js","Components/Quote.js","App.js","reportWebVitals.js","index.js"],"names":["Loading","LoadingWrapper","Loader","spin","keyframes","styled","div","Quote","props","quote","getNewQuote","Wrapper","QuoteText","text","Author","author","Button","onClick","button","Container","App","useState","quotes","setQuotes","setQuote","loading","setLoading","getRandomQuotes","length","randomNumber","Math","floor","random","useEffect","axios","get","then","res","data","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wxBAGO,IAAMA,EAAU,kBACrB,cAACC,EAAD,UACE,cAACC,EAAD,OAIEC,EAAOC,YAAH,KASJH,EAAiBI,IAAOC,IAAV,KAOdJ,EAASG,IAAOC,IAAV,IAMGH,G,+1BC5BR,IAAMI,EAAQ,SAACC,GAAW,IACvBC,EAAuBD,EAAvBC,MAAOC,EAAgBF,EAAhBE,YACf,OACE,eAACC,EAAD,WACE,cAACC,EAAD,UAAYH,EAAMI,OAClB,eAACC,EAAD,iBAAYL,EAAMM,OAASN,EAAMM,OAAS,eAE1C,cAACC,EAAD,CAAQC,QAASP,EAAjB,2BAIAM,EAASX,IAAOa,OAAV,KAYNN,EAAYP,IAAOC,IAAV,KAKTQ,EAAST,IAAOC,IAAV,KAKNK,EAAUN,IAAOC,IAAV,K,4FCKb,IAAMa,EAAYd,IAAOC,IAAV,KACAc,EApCf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAEaF,mBAAS,MAFtB,mBAENZ,EAFM,KAECe,EAFD,OAGiBH,oBAAS,GAH1B,mBAGNI,EAHM,KAGGC,EAHH,KAIPC,EAAkB,WACtB,GAAIL,EAAOM,OAAS,EAAG,CACrB,IAAMC,EAAeC,KAAKC,MAAMD,KAAKE,SAAWV,EAAOM,QACvD,OAAON,EAAOO,KAoBlB,OAZAI,qBAAU,WACRP,GAAW,GACXQ,IAAMC,IAAI,+BAA+BC,MAAK,SAACC,GAC7Cd,EAAUc,EAAIC,MACdZ,GAAW,QAEZ,IAEHO,qBAAU,WACRT,EAASG,OACR,CAACL,IAGF,eAACH,EAAD,WACGM,GAAW,cAAC,EAAD,IACXhB,GAAS,cAAC,EAAD,CAAOC,YAnBO,WAC1Bc,EAASG,MAkB4ClB,MAAOA,QCxBjD8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBL,MAAK,YAAkD,IAA/CM,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c35a7af7.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled, { keyframes } from 'styled-components';\r\n\r\nexport const Loading = () => (\r\n  <LoadingWrapper>\r\n    <Loader />\r\n  </LoadingWrapper>\r\n);\r\n\r\nconst spin = keyframes`\r\n  from {\r\n    transform: rotate(0deg);\r\n  }\r\n\r\n  to {\r\n    transform: rotate(360deg);\r\n  }\r\n`;\r\nconst LoadingWrapper = styled.div`\r\n  position: absolute;\r\n  top: 40%;\r\n  left: 50%;\r\n  margin: -50px 0px 0px -50px;\r\n`;\r\n\r\nconst Loader = styled.div`\r\n  border: 16px solid #f3f3f3;\r\n  border-top: 16px solid #1f0700;\r\n  border-radius: 50%;\r\n  width: 120px;\r\n  height: 120px;\r\n  animation: ${spin} 2s linear infinite;\r\n`;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport const Quote = (props) => {\r\n  const { quote, getNewQuote } = props;\r\n  return (\r\n    <Wrapper>\r\n      <QuoteText>{quote.text}</QuoteText>\r\n      <Author>by {quote.author ? quote.author : 'Jack ryan'}</Author>\r\n\r\n      <Button onClick={getNewQuote}>New Quote</Button>\r\n    </Wrapper>\r\n  );\r\n};\r\nconst Button = styled.button`\r\n  color: #f5f7f3;\r\n  float: right;\r\n  opacity: 1;\r\n  border-radius: 3px;\r\n  cursor: pointer;\r\n  border-width: 0px;\r\n  font-size: 0.85em;\r\n  padding: 0.3em;\r\n  height: 40px;\r\n  background-color: #ed6a5a;\r\n`;\r\nconst QuoteText = styled.div`\r\n  font-family: 'Merienda One', cursive;\r\n  font-size: 20px;\r\n`;\r\n\r\nconst Author = styled.div`\r\n  text-align: right;\r\n  padding-bottom: 20px;\r\n  color: #ed6a5a;\r\n`;\r\nconst Wrapper = styled.div`\r\n  border-radius: 3px;\r\n  height: 250px;\r\n  max-width: 700px;\r\n  margin: 15% auto auto auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-wrap: wrap;\r\n  text-align: center;\r\n  padding: 20px;\r\n  background-color: #f5f7f3;\r\n  overflow: auto;\r\n`;\r\n","import React, { useState, useEffect } from 'react';\nimport { Loading } from './Components/Loading';\nimport { Quote } from './Components/Quote';\nimport axios from 'axios';\nimport styled from 'styled-components';\nimport './App.css';\nfunction App() {\n  const [quotes, setQuotes] = useState([]);\n  const [quote, setQuote] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const getRandomQuotes = () => {\n    if (quotes.length > 1) {\n      const randomNumber = Math.floor(Math.random() * quotes.length);\n      return quotes[randomNumber];\n      //  return text;\n    }\n  };\n  const handleNewQuoteClick = () => {\n    setQuote(getRandomQuotes());\n  };\n\n  useEffect(() => {\n    setLoading(true);\n    axios.get('https://type.fit/api/quotes').then((res) => {\n      setQuotes(res.data);\n      setLoading(false);\n    });\n  }, []);\n\n  useEffect(() => {\n    setQuote(getRandomQuotes());\n  }, [quotes]);\n\n  return (\n    <Container>\n      {loading && <Loading />}\n      {quote && <Quote getNewQuote={handleNewQuoteClick} quote={quote} />}\n    </Container>\n  );\n}\n\nconst Container = styled.div``;\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}